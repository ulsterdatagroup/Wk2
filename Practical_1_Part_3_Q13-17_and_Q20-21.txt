-------------------------------------------------------------------------------------------------------------

#13. Write a function that will use the filter enumerator to output the square root of all multiples of 6 between 
#two given numbers.
# Output this as a string in the format of “Value is [value] and square root is [square root]”.
def sixmulti(a, b):
    number_list = range(a,b)
    by_six = list(filter(lambda x: x%6==0, number_list))
    for i in by_six:
        sq_root = list(map(lambda x: x**0.5, by_six))
        
    print(sq_root)
    return by_six, sq_root

def sqrt(a):
    for i in a:
        sq_root = list(map(lambda x: x**0.5, a))
        return sqrt

mylist,myroot=sixmulti(12,37)
root=sqrt(mylist)

for i in range(0, len(mylist)):
              print("Value is " + str(mylist[i]) + " and the square root is " + str(format(myroot[i],'.2f')))

--------------------------------------------------------------------------------------------------------------

# 14. Identify and use the correct iterator to merge the detail from the following lists.
# The first index of each list corresponds to one person, the second index from each list corresponds to the next person, etc.
# If detail is missing, insert the string “NOT SUPPLIED”. For example: “James lives in NOT SUPPLIED and is 28 years old”  
# Names = ["Sarah","Andrew","Paul","Sally","Sinead", "James", "Dave"]
# Towns = ["Larne","Carrickfergus","Newtownabbey"]  
# Ages = [22,30,54,42,26,28]

import itertools as it
Names = ["Sarah","Andrew","Paul","Sally","Sinead", "James", "Dave"]
Towns = ["Larne","Carrickfergus","Newtownabbey"]  
Ages = [22,30,54,42,26,28]

myZip = zip(Names,Towns,Ages)#zips the values
  
#Using the imported function it.zip_longest for the longest list and fills in missing data
myLongestZip = list(it.zip_longest(Names,Towns,Ages,fillvalue="NOT SUPPLIED"))

#Reversing zip function
names,towns,ages = list(zip(*myLongestZip))

for i in range(0, len(names)):
    print(str((names[i])) + " lives in " + str((towns[i])) + " and is "  + str((ages[i])) + " years old.")

--------------------------------------------------------------------------------------------------------------

#15. Re-create the following code using a list comprehension:  
#numbers = [1,2,3,4,5,6,7,8,9,10]
#L = []  for number in numbers:
#number = number*2  L.append(number)  
#L 

numbers = [1,2,3,4,5,6,7,8,9,10]
L = []
for number in numbers:
    number = number*2  
    L.append(number)  
L 
print(L)

doubles = [n*2 for n in numbers] #A list comprehension that doubles each element in the list
print(doubles) #The output is the same

--------------------------------------------------------------------------------------------------------------

#16. Use a list comprehension to output only the negative numbers from a list. 
nums = [-1,3,45,-89,3,-3,4,-5]
negnums = [i for i in nums if i<0]
negnums

--------------------------------------------------------------------------------------------------------------

#17. Use a list comprehension that will exclude any of the following product codes that begin with TECH,
# and will replace the product code with the string “NOT SUPPLIED” if the product code is an empty string.
# products = {"Banana": "FOOD1", "Apple":"", "Orange":"FOOD3", "DVD":"TECH1", "Raspberry":"", "CD":"TECH2", "Grape":"FOOD5"}
#  If written correctly, the output will be:  ['FOOD1', 'NOT SUPPLIED', 'FOOD3', 'NOT SUPPLIED', 'FOOD5']

products = {"Banana": "FOOD1", "Apple":"", "Orange":"FOOD3", "DVD":"TECH1", "Raspberry":"", "CD":"TECH2", "Grape":"FOOD5"}
#correctedproducts = {key:prod for (key,prod) in products.items() if prod != prod.startswith('TECH')}
#correctedproducts = {key:prod for (key,prod) in products.items() if not(prod.startswith('TECH')) if not(prod=="")}
correctedproducts = {key:("NOT SUPPLIED" if prod=="" else prod) for (key,prod) in products.items() if not(prod.startswith('TECH'))}
print(correctedproducts.values())

--------------------------------------------------------------------------------------------------------------

#20. Write a function that stores information about a car in a dictionary. 
# The function should always receive a manufacturer and a model name. 
# It should then accept an arbitrary number of keyword arguments. 
# Call the function with the required information and two other name-value pairs, such as a color or an optional feature. 
# Your function should work for a call like this one:  
# car = make_car('Vauxhall','Corsa',colour='blue', spoiler=True) 
# Print the dictionary to ensure all the information was stored correctly.
def make_car(make, model, **kwargs):
    print("make:" + make)
    print("model:" + model)
    for key, value in kwargs.items():
        print(str(key) + ":" + str(value))
    
car = make_car('Vauxhall','Corsa',colour='blue', spoiler=True)

--------------------------------------------------------------------------------------------------------------

#21. Write a function that will output one random colour from a list each time the function is called
import random

#Function to generate a random choice from a list
def randomColour():
    colours = ("red","blue","yellow","green","orange","black","white","grey","pink","cream")
    luckyColour = random.choice(colours)
    return luckyColour

#Calls the random colour generating function
randomColour()

